document.addEventListener('DOMContentLoaded', () => {
    const envelope = document.getElementById('envelope');
    const letterPopup = document.getElementById('letterPopup');
    const closePopup = document.getElementById('closePopup');
    
    // T√¨m v√† ·∫©n n√∫t ƒë·ªçc th∆∞
    const changeContentButton = document.getElementById('changeContentButton');
    if (changeContentButton) {
        changeContentButton.parentElement.style.display = 'none';
    }
    
    // Bi·∫øn ƒë·ªÉ theo d√µi tr·∫°ng th√°i c·ªßa phong b√¨ v√† hi·ªáu ·ª©ng ·∫£nh
    let isEnvelopeOpen = false;
    let areImagesAnimated = false;
    
    // ·∫®n t·∫•t c·∫£ c√°c h√¨nh ·∫£nh ban ƒë·∫ßu
    const floatingImages = document.querySelectorAll('.floating-image');
    floatingImages.forEach(img => {
        img.style.opacity = "0";
        img.style.top = "-120px";
    });
    
    // Hi·ªáu ·ª©ng khi nh·∫•p v√†o phong b√¨
    envelope.addEventListener('click', function() {
        if (!isEnvelopeOpen) {
            // N·∫øu phong b√¨ ch∆∞a m·ªü, m·ªü phong b√¨ v√† hi·ªÉn th·ªã th∆∞
            openEnvelope();
            isEnvelopeOpen = true;
            
            // Ch·ªâ b·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng r∆°i ·∫£nh khi l·∫ßn ƒë·∫ßu click v√†o phong b√¨
            if (!areImagesAnimated) {
                startAllFloatingImages();
                areImagesAnimated = true;
            }
        } else {
            // N·∫øu phong b√¨ ƒë√£ m·ªü, ƒë√≥ng l·∫°i
            closeEnvelope();
            isEnvelopeOpen = false;
        }
    });
    
    // H√†m x·ª≠ l√Ω m·ªü phong b√¨ v√† hi·ªÉn th·ªã popup
    function openEnvelope() {
        // B∆∞·ªõc 1: M·ªü n·∫Øp th∆∞
        envelope.classList.add('open');
        envelope.classList.remove('closed');
        
        // B∆∞·ªõc 2: B·∫≠t nh·∫°c n·∫øu c√≥
        const music = document.getElementById('backgroundMusic');
        if (music) {
            // Lu√¥n ph√°t nh·∫°c khi m·ªü phong b√¨
            music.play().then(() => {
                updateMusicIcon(true);
            }).catch(e => {
                console.log("Kh√¥ng th·ªÉ ph√°t nh·∫°c t·ª± ƒë·ªông:", e);
            });
        }
        
        // B∆∞·ªõc 3: Sau khi card tr·ªìi l√™n, hi·ªÉn th·ªã popup th∆∞
        setTimeout(() => {
            letterPopup.style.display = 'flex';
        }, 2000);
    }
    
    // H√†m x·ª≠ l√Ω ƒë√≥ng phong b√¨
    function closeEnvelope() {
        envelope.classList.remove('open');
        envelope.classList.add('closed');
        letterPopup.style.display = 'none';
    }
    
    // ƒê√≥ng popup khi nh·∫•p v√†o n√∫t ƒë√≥ng
    if (closePopup) {
        closePopup.addEventListener('click', function() {
            letterPopup.style.display = 'none';
            closeEnvelope();
            isEnvelopeOpen = false;
        });
    }
    
    // ƒê√≥ng popup khi nh·∫•p ra ngo√†i
    window.addEventListener('click', function(event) {
        if (event.target === letterPopup) {
            letterPopup.style.display = 'none';
            closeEnvelope();
            isEnvelopeOpen = false;
        }
    });

    // ƒê·ªãnh nghƒ©a danh s√°ch nh·∫°c (ch·ªâ s·ª≠ d·ª•ng c√°c file local)
    const playlist = [
        {
            title: "[Playlist] - Gh√© Qua, M·ªôt ƒê·ªùi, 10 Ng√†n NƒÉm, Ph√©p M√†u",
            path: "EM/[Playlist] - Gh√© Qua, M·ªôt ƒê·ªùi, 10 Ng√†n NƒÉm, Ph√©p M√†u,.... ÔΩú M√πa H·∫° C√≥ Anh.mp3"
        },
        {
            title: "PlayList MCK ÔΩúH√£y ƒêeo Tai Nghe ƒê·ªÉ Tr·∫£i Nghi·ªám C·∫£m Gi√°c Hay H∆°n",
            path: "EM/PlayList MCK ÔΩúH√£y ƒêeo Tai Nghe ƒê·ªÉ Tr·∫£i Nghi·ªám C·∫£m Gi√°c Hay H∆°n.mp3"
        },
        {
            title: "ƒê√°nh ƒê·ªïi th√¥i em",
            path: "EM/Obito - ƒê√°nh ƒê·ªïi ft. MCK.mp3"
        },
        {
            title: "Anh ƒê√£ ·ªîn H∆°n nh√©",
            path: "EM/ADOH.mp3"
        },
        {
            title: "Em ƒëang Bu·ªìn Hay Vui",
            path: "EM/BU·ªíN HAY VUI - VSOUL x MCK x Obito x Ronboogz x Boyzed (Official Audio).mp3"
        },
        {
            title: "Anh ƒë√£ CH√åM S√ÇU v√†o em r·ªìi",
            path: "EM/Ch√¨m S√¢u - RPT MCK (feat. Trung Tr·∫ßn) ÔΩú Official Lyrics Video.mp3"
        },
        {
            title: "M·ªông Yu Nha",
            path: "EM/M·ªòNG YU - AMEE x MCK ÔΩú Official Music Video (from 'M·ªòNGMEE' album).mp3"
        }
    ];
    
    // Ch·ªâ s·ªë c·ªßa b√†i h√°t hi·ªán t·∫°i
    let currentTrackIndex = 0;
    
    // L·∫•y c√°c ph·∫ßn t·ª≠ DOM c·∫ßn thi·∫øt
    const music = document.getElementById('backgroundMusic');
    const musicToggle = document.getElementById('musicToggle');
    const musicToggle2 = document.getElementById('musicToggle2');
    const prevTrack = document.getElementById('prevTrack');
    const nextTrack = document.getElementById('nextTrack');
    const currentTrackName = document.getElementById('currentTrackName');
    const musicSeeker = document.getElementById('musicSeeker');
    const volumeControl = document.getElementById('volumeControl');
    const currentTimeDisplay = document.getElementById('currentTime');
    const totalTimeDisplay = document.getElementById('totalTime');
    
    // Thi·∫øt l·∫≠p b√†i h√°t ƒë·∫ßu ti√™n
    loadTrack(currentTrackIndex);
    
    // H√†m load b√†i h√°t t·ª´ playlist (ƒëi·ªÅu ch·ªânh ƒë·ªÉ kh√¥ng t·ª± ƒë·ªông ph√°t)
    function loadTrack(trackIndex) {
        // ƒê·∫£m b·∫£o index n·∫±m trong ph·∫°m vi c·ªßa playlist
        if (trackIndex < 0) trackIndex = playlist.length - 1;
        if (trackIndex >= playlist.length) trackIndex = 0;
        
        currentTrackIndex = trackIndex;
        
        // Ki·ªÉm tra xem b√†i h√°t c√≥ ƒë∆∞·ªùng d·∫´n kh√¥ng
        if (!playlist[trackIndex].path) {
            // N·∫øu kh√¥ng c√≥ ƒë∆∞·ªùng d·∫´n, chuy·ªÉn sang b√†i ti·∫øp theo
            loadTrack(currentTrackIndex + 1);
            return;
        }
        
        // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n tr·ª±c ti·∫øp t·ª´ playlist
        let audioUrl = playlist[trackIndex].path;
        
        // Ghi nh·ªõ tr·∫°ng th√°i ph√°t hi·ªán t·∫°i tr∆∞·ªõc khi load b√†i m·ªõi
        const wasPlaying = !music.paused;
        
        // C·∫≠p nh·∫≠t source c·ªßa audio
        music.innerHTML = `<source src="${audioUrl}" type="audio/mp3">`;
        music.load();
        
        // X·ª≠ l√Ω l·ªói khi t·∫£i file nh·∫°c
        music.addEventListener('error', function(e) {
            console.error('L·ªói t·∫£i nh·∫°c:', e);
            currentTrackName.textContent = `‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i "${playlist[trackIndex].title}"`;
            
            // T·ª± ƒë·ªông th·ª≠ b√†i ti·∫øp theo sau 2 gi√¢y n·∫øu ƒëang ph√°t
            if (wasPlaying) {
                setTimeout(() => {
                    loadTrack((trackIndex + 1) % playlist.length);
                }, 2000);
            }
        }, {once: true});
        
        // C·∫≠p nh·∫≠t t√™n b√†i h√°t
        currentTrackName.textContent = playlist[trackIndex].title;
        
        // Ch·ªâ ph√°t nh·∫°c n·∫øu tr∆∞·ªõc ƒë√≥ ƒëang ph√°t (v√≠ d·ª• khi chuy·ªÉn b√†i)
        if (wasPlaying) {
            music.play().then(() => {
                updateMusicIcon(true);
            }).catch(e => {
                console.log("Kh√¥ng th·ªÉ ph√°t nh·∫°c t·ª± ƒë·ªông:", e);
            });
        } else {
            // N·∫øu kh√¥ng ph·∫£i ƒëang ph√°t, c·∫≠p nh·∫≠t bi·ªÉu t∆∞·ª£ng th√†nh tr·∫°ng th√°i d·ª´ng
            updateMusicIcon(false);
        }
        
        // Reset thanh tua v√† c·∫≠p nh·∫≠t th·ªùi gian khi metadata ƒë∆∞·ª£c load
        music.addEventListener('loadedmetadata', function onMetadataLoaded() {
            // C·∫≠p nh·∫≠t max value cho thanh tua
            musicSeeker.max = Math.floor(music.duration);
            
            // Hi·ªÉn th·ªã t·ªïng th·ªùi gian
            const totalMinutes = Math.floor(music.duration / 60);
            const totalSeconds = Math.floor(music.duration % 60);
            totalTimeDisplay.textContent = `${totalMinutes}:${totalSeconds < 10 ? '0' : ''}${totalSeconds}`;
            
            // X√≥a event listener n√†y ƒë·ªÉ tr√°nh ƒëƒÉng k√Ω nhi·ªÅu l·∫ßn
            music.removeEventListener('loadedmetadata', onMetadataLoaded);
        });
    }
    
    // X·ª≠ l√Ω khi b√†i h√°t k·∫øt th√∫c - v·∫´n t·ª± ƒë·ªông chuy·ªÉn v√† ph√°t b√†i ti·∫øp theo
    music.addEventListener('ended', () => {
        loadTrack(currentTrackIndex + 1);
    });
    
    // X·ª≠ l√Ω n√∫t previous
    if (prevTrack) {
        prevTrack.addEventListener('click', () => {
            loadTrack(currentTrackIndex - 1);
        });
    }
    
    // X·ª≠ l√Ω n√∫t next
    if (nextTrack) {
        nextTrack.addEventListener('click', () => {
            loadTrack(currentTrackIndex + 1);
        });
    }
    
    // X·ª≠ l√Ω n√∫t play/pause (n√∫t l·ªõn b√™n tr√°i)
    if (musicToggle) {
        musicToggle.addEventListener('click', toggleMusic);
    }
    
    // X·ª≠ l√Ω n√∫t play/pause (n√∫t nh·ªè ·ªü gi·ªØa)
    if (musicToggle2) {
        musicToggle2.addEventListener('click', toggleMusic);
    }
    
    // Gi·ªØ nguy√™n v√† ƒëi·ªÅu ch·ªânh c√°c h√†m li√™n quan ƒë·∫øn ƒëi·ªÅu khi·ªÉn nh·∫°c
    function toggleMusic() {
        if (music.paused) {
            music.play();
            updateMusicIcon(true);
        } else {
            music.pause();
            updateMusicIcon(false);
        }
    }
    
    function updateMusicIcon(isPlaying) {
        if (musicToggle) {
            const icon = musicToggle.querySelector('.music-icon');
            if (icon) {
                icon.textContent = isPlaying ? 'üîä' : 'üîá';
            }
        }
        
        if (musicToggle2) {
            musicToggle2.textContent = isPlaying ? '‚è∏' : '‚ñ∂Ô∏è';
        }
    }
    
    // C·∫≠p nh·∫≠t thanh tua nh·∫°c
    music.addEventListener('loadedmetadata', () => {
        // Thi·∫øt l·∫≠p th·ªùi l∆∞·ª£ng t·ªëi ƒëa cho thanh tua
        musicSeeker.max = Math.floor(music.duration);
        
        // Hi·ªÉn th·ªã t·ªïng th·ªùi gian
        const totalMinutes = Math.floor(music.duration / 60);
        const totalSeconds = Math.floor(music.duration % 60);
        totalTimeDisplay.textContent = `${totalMinutes}:${totalSeconds < 10 ? '0' : ''}${totalSeconds}`;
    });
    
    // C·∫≠p nh·∫≠t thanh tua theo ti·∫øn ƒë·ªô ph√°t nh·∫°c
    music.addEventListener('timeupdate', () => {
        if (!musicSeeker.dragging) {
            musicSeeker.value = Math.floor(music.currentTime);
            
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã th·ªùi gian hi·ªán t·∫°i
            const currentMinutes = Math.floor(music.currentTime / 60);
            const currentSeconds = Math.floor(music.currentTime % 60);
            currentTimeDisplay.textContent = `${currentMinutes}:${currentSeconds < 10 ? '0' : ''}${currentSeconds}`;
        }
    });
    
    // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng tua
    musicSeeker.addEventListener('mousedown', () => {
        musicSeeker.dragging = true;
    });
    
    musicSeeker.addEventListener('mouseup', () => {
        musicSeeker.dragging = false;
        music.currentTime = musicSeeker.value;
    });
    
    musicSeeker.addEventListener('input', () => {
        const currentMinutes = Math.floor(musicSeeker.value / 60);
        const currentSeconds = Math.floor(musicSeeker.value % 60);
        currentTimeDisplay.textContent = `${currentMinutes}:${currentSeconds < 10 ? '0' : ''}${currentSeconds}`;
    });
    
    // X·ª≠ l√Ω ƒëi·ªÅu ch·ªânh √¢m l∆∞·ª£ng
    volumeControl.addEventListener('input', () => {
        music.volume = volumeControl.value;
        
        // C·∫≠p nh·∫≠t icon √¢m l∆∞·ª£ng
        const volumeIcon = document.querySelector('.volume-icon');
        if (volumeIcon) {
            if (music.volume === 0) {
                volumeIcon.textContent = 'üîá';
            } else if (music.volume < 0.5) {
                volumeIcon.textContent = 'üîâ';
            } else {
                volumeIcon.textContent = 'üîä';
            }
        }
    });
    
    // Thi·∫øt l·∫≠p √¢m l∆∞·ª£ng ban ƒë·∫ßu
    if (music && volumeControl) {
        music.volume = volumeControl.value;
    }

    // H√†m b·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng r∆°i cho t·∫•t c·∫£ c√°c h√¨nh ·∫£nh
    function startAllFloatingImages() {
        const totalImages = floatingImages.length;
        
        // Thi·∫øt l·∫≠p v·ªã tr√≠ cho c√°c h√¨nh ·∫£nh
        floatingImages.forEach((img, index) => {
            // Ph√¢n b·ªë ƒë·ªÅu c√°c h√¨nh ·∫£nh theo chi·ªÅu ngang
            const leftPos = 5 + (90 / (totalImages - 1)) * index;
            img.style.left = `${leftPos}%`;
            
            // ƒê·ªô tr·ªÖ tƒÉng d·∫ßn theo v·ªã tr√≠ t·ª´ tr√°i sang ph·∫£i
            const sequentialDelay = index * 0.3; // 0.3 gi√¢y gi·ªØa m·ªói ·∫£nh
            
            // Kh·ªüi t·∫°o animation cho h√¨nh ·∫£nh
            startFallingAnimation(img, sequentialDelay);
        });
    }
    
    function startFallingAnimation(img, initialDelay) {
        // ·∫®n ·∫£nh ban ƒë·∫ßu
        img.style.opacity = "0";
        img.style.top = "-120px";
        
        // TƒÉng th·ªùi gian r∆°i: t·ª´ 6-9s l√™n 15-25s (r∆°i ch·∫≠m h∆°n)
        const fallDuration = Math.random() * 10 + 15; // 15-25s
        
        // Lo·∫°i b·ªè animation l·∫Øc qua l·∫°i
        img.style.animation = "none";
        
        // Thi·∫øt l·∫≠p animation r∆°i sau m·ªôt ƒë·ªô tr·ªÖ
        setTimeout(() => {
            // Di chuy·ªÉn ·∫£nh t·ª´ tr√™n xu·ªëng v·ªõi t·ªëc ƒë·ªô ch·∫≠m h∆°n
            img.style.transition = `top ${fallDuration}s linear, opacity 1s`;
            img.style.top = "100vh";
            img.style.opacity = "0.8";
            
            // Khi k·∫øt th√∫c r∆°i, b·∫Øt ƒë·∫ßu l·∫°i v·ªõi ƒë·ªô tr·ªÖ ng·∫´u nhi√™n
            setTimeout(() => {
                // Reset v·ªã tr√≠
                img.style.transition = "none";
                img.style.opacity = "0";
                img.style.top = "-120px";
                
                // B·∫Øt ƒë·∫ßu animation m·ªõi sau ƒë·ªô tr·ªÖ d√†i h∆°n
                const randomDelay = Math.random() * 3; // TƒÉng ƒë·ªô tr·ªÖ t·ªëi ƒëa l√™n 3s
                setTimeout(() => {
                    startFallingAnimation(img, 0);
                }, randomDelay * 1000);
                
            }, fallDuration * 1000);
        }, initialDelay * 1000);
    }
    
    // Th√™m code x·ª≠ l√Ω n√∫t ·∫©n/hi·ªán phong b√¨
    const toggleEnvelopeBtn = document.getElementById('toggleEnvelopeBtn');
    const bodyElement = document.body;

    if (toggleEnvelopeBtn) {
        let envelopeVisible = true;
        
        toggleEnvelopeBtn.addEventListener('click', function() {
            if (envelopeVisible) {
                // ·∫®n phong b√¨ nh∆∞ng gi·ªØ hi·ªáu ·ª©ng ·∫£nh r∆°i
                bodyElement.classList.add('hide-envelope');
                toggleEnvelopeBtn.textContent = 'Th∆∞ c·ªßa anh';
                envelopeVisible = false;
                
                // B·∫Øt ƒë·∫ßu hi·ªáu ·ª©ng ·∫£nh r∆°i n·∫øu ch∆∞a b·∫Øt ƒë·∫ßu
                if (!areImagesAnimated) {
                    startAllFloatingImages();
                    areImagesAnimated = true;
                }
                
                // T·ª± ƒë·ªông ph√°t nh·∫°c n·∫øu ch∆∞a ph√°t
                if (music && music.paused) {
                    music.play().then(() => {
                        updateMusicIcon(true);
                    }).catch(e => {
                        console.log("Kh√¥ng th·ªÉ ph√°t nh·∫°c t·ª± ƒë·ªông:", e);
                    });
                }
            } else {
                // Hi·ªÉn th·ªã l·∫°i phong b√¨
                bodyElement.classList.remove('hide-envelope');
                toggleEnvelopeBtn.textContent = 'D√†nh cho b√© ch·ªâ nghe nh·∫°c';
                envelopeVisible = true;
                
                // Gi·ªØ nguy√™n hi·ªáu ·ª©ng ·∫£nh r∆°i ƒë√£ ƒë∆∞·ª£c b·∫≠t
            }
        });
    }
});

// B·∫Øt l·ªói unhandled rejection
window.addEventListener('unhandledrejection', function(e) {
    console.log('L·ªói promise kh√¥ng ƒë∆∞·ª£c x·ª≠ l√Ω:', e.reason);
    
    // NgƒÉn l·ªói hi·ªÉn th·ªã trong console n·∫øu l√† AbortError
    if (e.reason && e.reason.name === 'AbortError') {
        e.preventDefault();
    }
});

